Bootstrap: docker
From: pytorch/pytorch:1.9.1-cuda11.1-cudnn8-runtime

%files
    # Copies the source code for the from the local machine to the container image
    ./UserPrediction6DOF /opt/UserPrediction6DOF
    ./data/interpolated  /opt/data/interpolated
    ./data/flipped /opt/data/flipped
    ./data/average /opt/data/average
    ./data/normalized_min-max opt/data/normalized_min-max
    ./data/normalized_mean opt/data/normalized_mean
    ./data/normalized_full opt/data/normalized_full
    ./results /opt/results
    requirements.txt /opt
    config.toml /opt

%post
    # Python lives in a Anaconda environment in the container, so the PATH must be adjusted before conda can be called
    # export "PATH=/opt/conda/bin:$PATH"
    # chmod -R 777 /opt/results
    # -B /opt/results
    conda install pip
    pip install -r /opt/requirements.txt
    
%runscript
    # Start the training of LeNet5 on the Cifar10 dataset
    cd /opt

    # LSTM
    # run with interpolated dataset
    # python -m UserPrediction6DOF run -a rnn -m lstm -w 100

    # run with dataset with flipped quaternions
    # python -m UserPrediction6DOF run -a rnn -m lstm -w 100 -d 'data/flipped'

    # run with averaged dataset
    # python -m UserPrediction6DOF run -a rnn -m lstm -w 100 -d 'data/average'

    # run with min-max dataset
    # python -m UserPrediction6DOF run -a rnn -m lstm -w 100 -d 'data/normalized_min-max'

    # run with mean dataset
    # python -m UserPrediction6DOF run -a rnn -m lstm -w 100 -d 'data/normalized_mean'

    # run with full normalized dataset
    # python -m UserPrediction6DOF run -a rnn -m lstm -w 100 -d 'data/normalized_full'

    # GRU
    # run with interpolated dataset
    # python -m UserPrediction6DOF run -a rnn -m gru -w 100

    # run with dataset with flipped quaternions
    # python -m UserPrediction6DOF run -a rnn -m gru -w 100 -d 'data/flipped'

    # run with averaged dataset with flipped quaternions
    # python -m UserPrediction6DOF run -a rnn -m gru -w 100 -d 'data/average'

    # run with min-max dataset
    # python -m UserPrediction6DOF run -a rnn -m gru -w 100 -d 'data/normalized_min-max'

    # run with mean dataset
    # python -m UserPrediction6DOF run -a rnn -m gru -w 100 -d 'data/normalized_mean'

    # run with full normalized dataset
    python -m UserPrediction6DOF run -a rnn -m gru -w 100 -d 'data/normalized_full'

